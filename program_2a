public class sharetrade {
    // Static variable to store the maximum profit
    private static int maxProfit = 0;

    public static int findMaxProfit(int[] prices) {
        int n = prices.length;

        // If there are less than two prices, no transactions are possible
        if (n < 2) {
            return 0;
        }

        // Initialize variables to store profits from the two transactions
        int[] profit1 = new int[n];
        int[] profit2 = new int[n];

        // Initialize the maximum selling price for the second transaction
        int maxSell2 = prices[n - 1];

        // Calculate profits for the first transaction
        for (int i = n - 2; i >= 0; i--) {
            maxSell2 = Math.max(maxSell2, prices[i + 1]);
            profit1[i] = Math.max(profit1[i + 1], maxSell2 - prices[i]);
        }

        // Calculate profits for the second transaction
        int minBuy2 = prices[0];
        for (int i = 1; i < n; i++) {
            minBuy2 = Math.min(minBuy2, prices[i - 1]);
            profit2[i] = Math.max(profit2[i - 1], prices[i] - minBuy2);
        }

        // Calculate the maximum profit by combining profits from the two transactions
        maxProfit = 0;
        for (int i = 0; i < n; i++) {
            maxProfit = Math.max(maxProfit, profit1[i] + profit2[i]);
        }

        return maxProfit;
    }

    public static void main(String[] args) {
        // Sample Test Cases
        int[] prices1 = {10, 22, 5, 75, 65, 79, 90};
        System.out.println("Maximum Profit for prices1: " + findMaxProfit(prices1));  

        int[] prices2 = {2, 30, 15, 10, 8, 25, 80};
        System.out.println("Maximum Profit for prices2: " + findMaxProfit(prices2));
    }
}
